{"ast":null,"code":"import _classCallCheck from \"E:\\\\2023_2024\\\\IUH_HK2_2022_2023\\\\LTPTDL2\\\\dbank-master\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\2023_2024\\\\IUH_HK2_2022_2023\\\\LTPTDL2\\\\dbank-master\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\2023_2024\\\\IUH_HK2_2022_2023\\\\LTPTDL2\\\\dbank-master\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\2023_2024\\\\IUH_HK2_2022_2023\\\\LTPTDL2\\\\dbank-master\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\2023_2024\\\\IUH_HK2_2022_2023\\\\LTPTDL2\\\\dbank-master\\\\client\\\\src\\\\components\\\\User.js\";\nimport { Tabs, Tab } from 'react-bootstrap';\nimport dBank from '../abis/dBank.json';\nimport React, { Component, useState } from 'react';\nimport Token from '../abis/Token.json';\nimport dbank from '../dbank.png';\nimport Web3 from 'web3';\nimport './App.css';\nimport { userAccount } from './account';\nimport { BrowserRouter as Router, Navigate } from \"react-router-dom\";\nimport { useLocation } from 'react-router-dom';\nvar amount = JSON.parse(localStorage.getItem('amount')) || [0];\nvar name = 'kiet';\n\nvar Begin = /*#__PURE__*/function (_Component) {\n  _inherits(Begin, _Component);\n\n  var _super = _createSuper(Begin);\n\n  function Begin() {\n    _classCallCheck(this, Begin);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Begin, [{\n    key: \"connect\",\n    value: function connect() {\n      var location = useLocation();\n      var params = new URLSearchParams(location.search);\n      name = params.get('state');\n      console.log(name);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(name);\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        onLoad: this.connect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 8\n        }\n      }, \"hello\");\n    }\n  }]);\n\n  return Begin;\n}(Component); // class User extends Component{\n//   async loadBlockchainData(dispatch) {\n//     if(typeof window.ethereum !== 'undefined'){\n//       const web3 = new Web3(window.ethereum)\n//       await window.ethereum.enable();\n//       const netId = await web3.eth.net.getId()\n//       const accounts = await web3.eth.getAccounts()\n//       if(typeof accounts[0] !== 'undefined'){\n//         const balance = await web3.eth.getBalance(accounts[0])\n//         this.setState({account: accounts[0], balance: balance, web3: web3})\n//       } else {\n//         window.alert('Please login with MetaMask')\n//       }\n//         const token = new web3.eth.Contract(Token.abi, Token.networks[netId].address)\n//         const dbank = new web3.eth.Contract(dBank.abi, dBank.networks[netId].address)\n//         const dBankAddress = dBank.networks[netId].address\n//         this.setState({token: token, dbank: dbank, dBankAddress: dBankAddress})\n//         this.state.bankBanlace = await this.state.dbank.methods.getBalance(this.state.account).call({from:this.state.account})/ (10**18);\n//         this.state.TokenBalance = await this.state.dbank.methods.getToken(this.state.account).call({from:this.state.account})/ (10**18);\n//         this.state.stake = await this.state.dbank.methods.getStake(this.state.account).call({from:this.state.account}) / (10**18);\n//         let lenderAmount = await this.state.dbank.methods.\n//         getLenderAmount().call({from: this.state.account});\n//         for (let index = 0; index < lenderAmount ; index++) {\n//         lender[index]={\n//         account:await this.state.dbank.methods.getLender(index).call({from:this.state.account}),// lấy địa chỉ của những người cho mượn\n//         method: await this.state.dbank.methods.getBorrowMethod(index).call({from: this.state.account}),// lấy phương thức cho mượn ether hay token\n//         value: await this.state.dbank.methods.getBorrowMethod(index).call({from: this.state.account}) == \"Ether\" ? // lấy giá trị đã mượn tương ứng với phương pháp\n//         await this.state.dbank.methods.getBorrowBalanceOf(await this.state.dbank.methods.getLender(index).call({from:this.state.account})).call({from:this.state.account}) : \n//         await this.state.dbank.methods.getTokenBorrow(await this.state.dbank.methods.getLender(index).call({from:this.state.account})).call({from:this.state.account}), \n//         payOffAmount: await this.state.dbank.methods.getBorrowMethod(index).call({from: this.state.account}) == \"Ether\" ? \n//         await this.state.dbank.methods.getPayOffAmountEther(await this.state.dbank.methods.getLender(index).call({from:this.state.account})).call({from: this.state.account}) :\n//         await this.state.dbank.methods.getPayOffAmountToken(await this.state.dbank.methods.getLender(index).call({from:this.state.account})).call({from: this.state.account})\n//       };\n//         }\n//         this.state.connect = true;\n//     } else {\n//       window.alert('Please install MetaMask')\n//     }\n//   }\n//   async sendAddress(){\n//     this.props.socket.emit('join',this.state.account);\n//   }\n//   handleRequest = (e) => {\n//   e.preventDefault();\n//   let account = this.state.account;\n//   return fetch('http://localhost:3000/request', {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//     body: JSON.stringify({account: account}),\n//   })\n//     .then((res) => {\n//       if (!res.ok) {\n//         throw new Error('Network response was not ok');\n//       }\n//       return res.json();\n//     })\n//     .then((data) => {\n//       localStorage.setItem('amount',data);\n//       window.location.reload();\n//     })\n//     .catch((error) => {\n//       console.error('Error:', error);\n//     });\n// };\n//   async coc(amount) {\n//     if(this.state.dbank!=='undefined'){\n//       try{\n//       await this.state.dbank.methods.Coc().send({value: amount.toString(), from: this.state.account});\n//       fetch('http://localhost:3000/method', {\n//           method: 'POST',\n//           headers: {\n//           'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify({account: this.state.account, method: 'ether'}),\n//           })\n//       localStorage.setItem('amount',0);\n//       window.location.reload();\n//       } catch (e) {\n//         alert('that bai');\n//             window.location.reload();\n//       }\n//     }\n//   }\n//   async withdraw(e) {\n//     e.preventDefault()\n//     if(this.state.dbank!=='undefined'){\n//       try{\n//         await this.state.dbank.methods.withdraw().send({from: this.state.account})\n//       } catch(e) {\n//         alert('that bai');\n//         console.log('Error, withdraw: ', e)\n//       }\n//     }\n//   }\n//   async CocWithDeposit(amount){\n//     if(this.state.dbank!=='undefined'){\n//       try{\n//         amount = amount * 10**18\n//         await this.state.dbank.methods.CocWithEtherDeposit(amount.toString()).send({from:this.state.account});\n//         fetch('http://localhost:3000/method', {\n//           method: 'POST',\n//           headers: {\n//           'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify({account: this.state.account, method: 'ether'}),\n//           })\n//         } catch (e) {\n//         // báo lỗi nếu việc lấy giá trị bị lỗi\n//         console.log('Error, deposit: ', e)\n//       }\n//     }\n//   }\n//   async CocWithToken(amount){\n//     if(this.state.dbank!=='undefined'){\n//       try{\n//         amount = amount * 10**18;\n//         await this.state.token.methods.approve(this.state.dBankAddress, amount.toString()).send({from: this.state.account})\n//         await this.state.dbank.methods.CocWithToken(amount.toString()).send({from:this.state.account});\n//         fetch('http://localhost:3000/method', {\n//           method: 'POST',\n//           headers: {\n//           'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify({account: this.state.account, method: 'Token'}),\n//           })\n//         } catch (e) {\n//         // báo lỗi nếu việc lấy giá trị bị lỗi\n//         console.log('Error, deposit: ', e)\n//       }\n//     }\n//   }\n//   async deposit(amount) {\n//     if(this.state.dbank!=='undefined'){\n//       try{\n//         await this.state.dbank.methods.deposit().send({value: amount.toString(), from: this.state.account})\n//       } catch (e) {\n//         console.log('Error, deposit: ', e)\n//       }\n//     }\n//   }\n//   async lendToken(address, amount, interest){\n//     if(this.state.dbank!=='undefined'){\n//       try{\n//         amount = amount * 10**18;\n//         await this.state.token.methods.approve(this.state.dBankAddress, amount.toString()).send({from: this.state.account})\n//         await this.state.dbank.methods.lendToken(address, interest).send({value: amount, from:this.state.account});\n//         } catch (e) {\n//         // báo lỗi nếu việc lấy giá trị bị lỗi\n//         console.log('Error, deposit: ', e)\n//       }\n//     }\n//   }\n//   async lend(address,amountSend,interest) {\n//     if(this.state.dbank!=='undefined'){\n//       try{\n//         amountSend *= 10**18\n//         // Sau đó trả lại cho người dùng tiền đã thế chấp\n//         await this.state.dbank.methods.lendEther(address,amountSend.toString(),interest).send({from: this.state.account});\n//       } catch (e) {\n//         console.log('Error, deposit: ', e)\n//       }\n//     }\n//   }\n//   async lendDerectly(address,amountSend,interest) {\n//     if(this.state.dbank!=='undefined'){\n//       try{\n//         amountSend *= 10**18\n//         await this.state.dbank.methods.lendEtherDerectly(address,interest).send({value: amountSend.toString(),from: this.state.account});\n//       } catch (e) {\n//       }\n//     }\n//   }\n//   async payOffEther(address,amount) {\n//     if(this.state.dbank!=='undefined'){\n//       try{\n//         await this.state.dbank.methods.payOffEther(address,amount).send({value: amount, from: this.state.account});\n//       } catch (e) {\n//                 console.log('Error, deposit: ', e)\n//       }\n//     }\n//   }\n//   async payOffToken(address,amount){\n//     if(this.state.dbank!=='undefined'){\n//       try{\n//         await this.state.token.methods.approve(this.state.dBankAddress,amount).send({from: this.state.account})\n//         await this.state.dbank.methods.payOffToken(address).send({ from:this.state.account});\n//         } catch (e) {\n//         // báo lỗi nếu việc lấy giá trị bị lỗi\n//         console.log('Error, deposit: ', e)\n//       }\n//     }\n//   }\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       web3: 'undefined',\n//       account: '',\n//       token: null,\n//       dbank: null,\n//       balance: 0,\n//       dBankAddress: null,\n//       bankBanlace: 0,\n//       TokenBalance: 0,\n//       stake: 0,\n//       connect: false\n//     }\n//   }\n//   // dùng để tạo giao diện website \n//   render() {\n//     return (\n//       <div className='text-monospace'>\n//         {this.state.connect === false && <div onLoad={this.loadBlockchainData(this.props.dispatch)}></div> }\n//         { this.state.connect === true && <div>\n//         <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n//           <a\n//             className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n//             href=\"#\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//         <img src={dbank} className=\"App-logo\" alt=\"logo\" height=\"32\"/>\n//           <b>d₿ank</b>\n//         </a>\n//         </nav>\n//         <div className=\"container-fluid mt-5 text-center\">\n//         <br></br>\n//           <h1>Welcome to d₿ank</h1>\n//           <h2>{this.state.account}</h2>\n//           <h4>Ether: {this.state.bankBanlace / 10 ** 18}  <br/>  Token: {this.state.TokenBalance} <br/>  Stake: {this.state.stake} </h4>\n//             <br></br>\n//           <div className=\"row\">\n//             <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n//               <div className=\"content mr-auto ml-auto\">\n//               <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\n//                 <Tab eventKey=\"send\" title = \"Send\">\n//                   <div>\n//                     <form>\n//                     {(amount != 10) && <div>\n//                       <br></br>\n//                       <button type='button'  onClick={this.sendAddress.bind(this)}className='btn btn-primary'>Send Address</button><br></br>\n//                       <br></br>\n//                       <button type='submit'  onClick={this.handleRequest.bind(this)}className='btn btn-primary'>Refresh</button>\n//                     </div>\n//                     }\n//                     {(amount == 10) && \n//                          <div>\n//                   <br></br>\n//                       <p>Do you want to deposit?</p>\n//                     <form onSubmit={(e) => {\n//                       e.preventDefault()\n//                       amount = amount * 10**18;\n//                       this.coc(amount);\n//                     }}>\n//                       {/* tạo form cho người dùng nhạp số lượng */}\n//                       <div className='form-group mr-sm-2'>\n//                       <br></br>\n//                         <input\n//                           type='number'\n//                           className=\"form-control form-control-md\"\n//                           placeholder= {amount}\n//                           disabled />\n//                       </div>\n//                       <button type=\"submit\" className='btn btn-primary'>DEPOSIT</button>{\" \"}\n//                       <button type=\"submit\" className='btn btn-primary' onClick={(e) => {\n//                       e.preventDefault()\n//                       amount = amount;\n//                       this.CocWithDeposit(amount);}} >Deposit with deposit</button><br/>\n//                       <button type=\"submit\" className='mt-2 btn btn-primary' onClick={(e) => {\n//                       e.preventDefault()\n//                       amount = amount;\n//                       this.CocWithToken(amount);}} >Deposit with Token</button>\n//                     </form>\n//                   </div>}\n//                     </form>\n//                     </div>\n//                 </Tab>\n//                 <Tab eventKey=\"lend\" title=\"lend\">\n//                   <div>\n//                   <br></br>\n//                     How much do you want to deposit?\n//                     <br></br>\n//                     (min. amount is 0.01 ETH)\n//                     <br></br>\n//                     (1 deposit is possible at the time)\n//                     <br></br>\n//                     <form >\n//                       {/* tạo form cho người dùng nhạp số lượng */}\n//                       <div className='form-group mr-sm-2'>\n//                       <br></br>\n//                         <input\n//                           id='address'\n//                           type='text'\n//                           ref={(input) => { this.address = input }}\n//                           className=\"form-control form-control-md\"\n//                           placeholder='adress...'\n//                           required />\n//                           <br></br>\n//                           <input\n//                           id='amountSend'\n//                           type='number'\n//                           ref={(input) => { this.amountSend = input }}\n//                           className=\"form-control form-control-md\"\n//                           placeholder='amount to lend...'\n//                           required />\n//                           <br></br>\n//                           <input\n//                           id='interest'\n//                           type='number'\n//                           ref={(input) => { this.interest = input }}\n//                           className=\"form-control form-control-md\"\n//                           placeholder='interest to lend...'\n//                           required />\n//                       </div>\n//                       <button type='button' className='m-3 mt-0 btn btn-primary' onClick={(e) => {\n//                       e.preventDefault()\n//                       let amountsend = this.amountSend.value\n//                       let interest = this.interest.value\n//                       let address = this.address.value\n//                       this.lendToken(address,amountsend,interest);\n//                     }}>lendToken</button>\n//                       <button type='button'  className='btn btn-primary m-3 mt-0' onClick={(e) => {\n//                       e.preventDefault()\n//                       let amountsend = this.amountSend.value\n//                       let interest = this.interest.value\n//                       let address = this.address.value\n//                       this.lendDerectly(address,amountsend,interest);\n//                     }}>lendDerectly</button>\n//                       <button type='button' className='btn btn-primary m-3 mt-0'\n//                       onClick={(e) => {\n//                       e.preventDefault()\n//                       let amountsend = this.amountSend.value\n//                       let interest = this.interest.value\n//                       let address = this.address.value\n//                       this.lend(address,amountsend,interest);\n//                     }}>lend</button>\n//                     </form>\n//                   </div>\n//                   </Tab>\n//                   <Tab eventKey=\"deposit\" title=\"Deposit\">\n//                   <div>\n//                   <br></br>\n//                     How much do you want to deposit?\n//                     <br></br>\n//                     (min. amount is 0.01 ETH)\n//                     <br></br>\n//                     (1 deposit is possible at the time)\n//                     <br></br>\n//                     {/* khi người dùng nhập vào số lượng và nhấn nút submit \\ */}\n//                     <form onSubmit={(e) => {\n//                       e.preventDefault()\n//                       // lấy số lượng ether mà người dùng muốn gửi\n//                       let amount = this.depositAmount.value\n//                       // đổi ra giá trị wei \n//                       amount = amount * 10**18 //convert to wei\n//                       // gọi hàm deposit với số lượng đó\n//                       this.deposit(amount);\n//                     }}>\n//                       {/* tạo form cho người dùng nhạp số lượng */}\n//                       <div className='form-group mr-sm-2'>\n//                       <br></br>\n//                         <input\n//                           id='depositAmount'\n//                           step=\"0.01\"\n//                           type='number'\n//                           ref={(input) => { this.depositAmount = input }}\n//                           className=\"form-control form-control-md\"\n//                           placeholder='amount...'\n//                           required />\n//                       </div>\n//                       <button type='submit' className='btn btn-primary'>DEPOSIT</button>\n//                     </form>\n//                   </div>\n//                   </Tab>\n//                   <Tab eventKey=\"withdraw\" title=\"Withdraw\">\n//                   <br></br>\n//                     Do you want to withdraw + take interest?\n//                     <br></br>\n//                     <br></br>\n//                   <div>\n//                     {/* tương tự như trên khi người dùng nhấn nút withdraw sẽ thực hiện hàm withdraw */}\n//                     <button type='submit' className='btn btn-primary' onClick={(e) => this.withdraw(e)}>WITHDRAW</button>\n//                   </div>\n//                 </Tab>\n//                 <Tab eventKey=\"Payoff\" title=\"Pay off\">\n//                   {lender != [] && lender.map(\n//                     lendercon  =>\n//                     <div>\n//                     <form >\n//                       {/* tạo form cho người dùng nhạp số lượng */}\n//                       <div className='form-group mr-sm-2'>\n//                       <br></br>\n//                         <input\n//                           type='text'\n//                           className=\"form-control form-control-md\"\n//                           placeholder= {lendercon.account} \n//                           disabled/>\n//                           <br></br>\n//                         <input\n//                           type='number'\n//                           className=\"form-control form-control-md\"\n//                           placeholder= {lendercon.value}\n//                           disabled\n//                           />\n//                           <br></br>\n//                         <input\n//                           type='text'\n//                           className=\"form-control form-control-md\"\n//                           placeholder= {lendercon.method}\n//                           disabled/>\n//                           <br></br>\n//                         <input\n//                           type='text'\n//                           className=\"form-control form-control-md\"\n//                           placeholder= {lendercon.payOffAmount} \n//                           disabled/>\n//                       </div>\n//                       <button type='button' className='m-3 mt-0 btn btn-primary' onClick={(e) => {\n//                       e.preventDefault()\n//                       this.payOffToken(lendercon.account, lendercon.payOffAmount);\n//                     }}>Pay off by Token</button>\n//                       <button type='button' className='btn btn-primary m-3 mt-0'\n//                       onClick={(e) => {\n//                       e.preventDefault()\n//                       this.payOffEther(lendercon.account, lendercon.payOffAmount);\n//                     }}>Pay off by Ether</button>\n//                     </form>\n//                   </div>)}\n//                   </Tab>\n//                 </Tabs>\n//               </div>\n//             </main>\n//           </div>\n//         </div>\n//         </div>}\n//       </div>\n//     );\n//   }\n// }\n\n\nexport { Begin as default };","map":{"version":3,"sources":["E:/2023_2024/IUH_HK2_2022_2023/LTPTDL2/dbank-master/client/src/components/User.js"],"names":["Tabs","Tab","dBank","React","Component","useState","Token","dbank","Web3","userAccount","BrowserRouter","Router","Navigate","useLocation","amount","JSON","parse","localStorage","getItem","name","Begin","location","params","URLSearchParams","search","get","console","log","connect"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,WAAP;AACA,SAAQC,WAAR,QAA0B,WAA1B;AACA,SACIC,aAAa,IAAIC,MADrB,EAEIC,QAFJ,QAGM,kBAHN;AAIA,SAASC,WAAT,QAA4B,kBAA5B;AACA,IAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,KAA8C,CAAC,CAAD,CAA3D;AACA,IAAIC,IAAI,GAAG,MAAX;;IACqBC,K;;;;;;;;;;;;;8BACV;AACP,UAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACE,UAAMS,MAAM,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,CAAf;AACAL,MAAAA,IAAI,GAAGG,MAAM,CAACG,GAAP,CAAW,OAAX,CAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACH;;;6BACQ;AACPO,MAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACA,0BACG;AAAI,QAAA,MAAM,EAAE,KAAKS,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADH;AAGH;;;;EAZkCxB,S,GAanhdqBgB,K","sourcesContent":["import { Tabs, Tab } from 'react-bootstrap'\r\nimport dBank from '../abis/dBank.json'\r\nimport React, { Component,useState } from 'react';\r\nimport Token from '../abis/Token.json'\r\nimport dbank from '../dbank.png';\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\nimport {userAccount} from './account';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Navigate \r\n}from \"react-router-dom\"\r\nimport { useLocation } from 'react-router-dom';\r\nlet amount = JSON.parse(localStorage.getItem('amount')) || [0];\r\nlet name = 'kiet'; \r\nexport default class Begin extends Component{\r\n  connect(){\r\n    const location = useLocation();\r\n      const params = new URLSearchParams(location.search);\r\n      name = params.get('state');\r\n      console.log(name)\r\n  }\r\n  render (){\r\n    console.log(name);\r\n    return (\r\n       <h1 onLoad={this.connect}>hello</h1>\r\n    )\r\n}}\r\n// class User extends Component{\r\n//   async loadBlockchainData(dispatch) {\r\n//     if(typeof window.ethereum !== 'undefined'){\r\n//       const web3 = new Web3(window.ethereum)\r\n//       await window.ethereum.enable();\r\n//       const netId = await web3.eth.net.getId()\r\n//       const accounts = await web3.eth.getAccounts()\r\n//       if(typeof accounts[0] !== 'undefined'){\r\n//         const balance = await web3.eth.getBalance(accounts[0])\r\n//         this.setState({account: accounts[0], balance: balance, web3: web3})\r\n//       } else {\r\n//         window.alert('Please login with MetaMask')\r\n//       }\r\n//         const token = new web3.eth.Contract(Token.abi, Token.networks[netId].address)\r\n//         const dbank = new web3.eth.Contract(dBank.abi, dBank.networks[netId].address)\r\n//         const dBankAddress = dBank.networks[netId].address\r\n//         this.setState({token: token, dbank: dbank, dBankAddress: dBankAddress})\r\n//         this.state.bankBanlace = await this.state.dbank.methods.getBalance(this.state.account).call({from:this.state.account})/ (10**18);\r\n//         this.state.TokenBalance = await this.state.dbank.methods.getToken(this.state.account).call({from:this.state.account})/ (10**18);\r\n//         this.state.stake = await this.state.dbank.methods.getStake(this.state.account).call({from:this.state.account}) / (10**18);\r\n//         let lenderAmount = await this.state.dbank.methods.\r\n//         getLenderAmount().call({from: this.state.account});\r\n//         for (let index = 0; index < lenderAmount ; index++) {\r\n//         lender[index]={\r\n//         account:await this.state.dbank.methods.getLender(index).call({from:this.state.account}),// lấy địa chỉ của những người cho mượn\r\n//         method: await this.state.dbank.methods.getBorrowMethod(index).call({from: this.state.account}),// lấy phương thức cho mượn ether hay token\r\n//         value: await this.state.dbank.methods.getBorrowMethod(index).call({from: this.state.account}) == \"Ether\" ? // lấy giá trị đã mượn tương ứng với phương pháp\r\n//         await this.state.dbank.methods.getBorrowBalanceOf(await this.state.dbank.methods.getLender(index).call({from:this.state.account})).call({from:this.state.account}) : \r\n//         await this.state.dbank.methods.getTokenBorrow(await this.state.dbank.methods.getLender(index).call({from:this.state.account})).call({from:this.state.account}), \r\n\r\n//         payOffAmount: await this.state.dbank.methods.getBorrowMethod(index).call({from: this.state.account}) == \"Ether\" ? \r\n//         await this.state.dbank.methods.getPayOffAmountEther(await this.state.dbank.methods.getLender(index).call({from:this.state.account})).call({from: this.state.account}) :\r\n//         await this.state.dbank.methods.getPayOffAmountToken(await this.state.dbank.methods.getLender(index).call({from:this.state.account})).call({from: this.state.account})\r\n//       };\r\n//         }\r\n//         this.state.connect = true;\r\n//     } else {\r\n//       window.alert('Please install MetaMask')\r\n//     }\r\n//   }\r\n//   async sendAddress(){\r\n//     this.props.socket.emit('join',this.state.account);\r\n//   }\r\n//   handleRequest = (e) => {\r\n//   e.preventDefault();\r\n//   let account = this.state.account;\r\n//   return fetch('http://localhost:3000/request', {\r\n//     method: 'POST',\r\n//     headers: {\r\n//       'Content-Type': 'application/json',\r\n//     },\r\n//     body: JSON.stringify({account: account}),\r\n//   })\r\n//     .then((res) => {\r\n//       if (!res.ok) {\r\n//         throw new Error('Network response was not ok');\r\n//       }\r\n//       return res.json();\r\n//     })\r\n//     .then((data) => {\r\n//       localStorage.setItem('amount',data);\r\n//       window.location.reload();\r\n//     })\r\n//     .catch((error) => {\r\n//       console.error('Error:', error);\r\n//     });\r\n// };\r\n//   async coc(amount) {\r\n//     if(this.state.dbank!=='undefined'){\r\n//       try{\r\n//       await this.state.dbank.methods.Coc().send({value: amount.toString(), from: this.state.account});\r\n//       fetch('http://localhost:3000/method', {\r\n//           method: 'POST',\r\n//           headers: {\r\n//           'Content-Type': 'application/json',\r\n//           },\r\n//           body: JSON.stringify({account: this.state.account, method: 'ether'}),\r\n//           })\r\n//       localStorage.setItem('amount',0);\r\n//       window.location.reload();\r\n//       } catch (e) {\r\n//         alert('that bai');\r\n//             window.location.reload();\r\n//       }\r\n//     }\r\n//   }\r\n//   async withdraw(e) {\r\n//     e.preventDefault()\r\n//     if(this.state.dbank!=='undefined'){\r\n//       try{\r\n//         await this.state.dbank.methods.withdraw().send({from: this.state.account})\r\n//       } catch(e) {\r\n//         alert('that bai');\r\n//         console.log('Error, withdraw: ', e)\r\n//       }\r\n//     }\r\n//   }\r\n//   async CocWithDeposit(amount){\r\n//     if(this.state.dbank!=='undefined'){\r\n//       try{\r\n//         amount = amount * 10**18\r\n//         await this.state.dbank.methods.CocWithEtherDeposit(amount.toString()).send({from:this.state.account});\r\n//         fetch('http://localhost:3000/method', {\r\n//           method: 'POST',\r\n//           headers: {\r\n//           'Content-Type': 'application/json',\r\n//           },\r\n//           body: JSON.stringify({account: this.state.account, method: 'ether'}),\r\n//           })\r\n//         } catch (e) {\r\n//         // báo lỗi nếu việc lấy giá trị bị lỗi\r\n//         console.log('Error, deposit: ', e)\r\n//       }\r\n//     }\r\n//   }\r\n//   async CocWithToken(amount){\r\n//     if(this.state.dbank!=='undefined'){\r\n//       try{\r\n//         amount = amount * 10**18;\r\n//         await this.state.token.methods.approve(this.state.dBankAddress, amount.toString()).send({from: this.state.account})\r\n//         await this.state.dbank.methods.CocWithToken(amount.toString()).send({from:this.state.account});\r\n//         fetch('http://localhost:3000/method', {\r\n//           method: 'POST',\r\n//           headers: {\r\n//           'Content-Type': 'application/json',\r\n//           },\r\n//           body: JSON.stringify({account: this.state.account, method: 'Token'}),\r\n//           })\r\n        \r\n//         } catch (e) {\r\n//         // báo lỗi nếu việc lấy giá trị bị lỗi\r\n//         console.log('Error, deposit: ', e)\r\n//       }\r\n//     }\r\n//   }\r\n//   async deposit(amount) {\r\n//     if(this.state.dbank!=='undefined'){\r\n//       try{\r\n//         await this.state.dbank.methods.deposit().send({value: amount.toString(), from: this.state.account})\r\n//       } catch (e) {\r\n//         console.log('Error, deposit: ', e)\r\n//       }\r\n//     }\r\n//   }\r\n//   async lendToken(address, amount, interest){\r\n//     if(this.state.dbank!=='undefined'){\r\n//       try{\r\n//         amount = amount * 10**18;\r\n//         await this.state.token.methods.approve(this.state.dBankAddress, amount.toString()).send({from: this.state.account})\r\n//         await this.state.dbank.methods.lendToken(address, interest).send({value: amount, from:this.state.account});\r\n//         } catch (e) {\r\n//         // báo lỗi nếu việc lấy giá trị bị lỗi\r\n//         console.log('Error, deposit: ', e)\r\n//       }\r\n//     }\r\n//   }\r\n//   async lend(address,amountSend,interest) {\r\n//     if(this.state.dbank!=='undefined'){\r\n//       try{\r\n//         amountSend *= 10**18\r\n//         // Sau đó trả lại cho người dùng tiền đã thế chấp\r\n//         await this.state.dbank.methods.lendEther(address,amountSend.toString(),interest).send({from: this.state.account});\r\n//       } catch (e) {\r\n//         console.log('Error, deposit: ', e)\r\n//       }\r\n//     }\r\n//   }\r\n//   async lendDerectly(address,amountSend,interest) {\r\n//     if(this.state.dbank!=='undefined'){\r\n//       try{\r\n//         amountSend *= 10**18\r\n//         await this.state.dbank.methods.lendEtherDerectly(address,interest).send({value: amountSend.toString(),from: this.state.account});\r\n//       } catch (e) {\r\n//       }\r\n//     }\r\n//   }\r\n//   async payOffEther(address,amount) {\r\n//     if(this.state.dbank!=='undefined'){\r\n//       try{\r\n//         await this.state.dbank.methods.payOffEther(address,amount).send({value: amount, from: this.state.account});\r\n//       } catch (e) {\r\n//                 console.log('Error, deposit: ', e)\r\n\r\n//       }\r\n//     }\r\n//   }\r\n//   async payOffToken(address,amount){\r\n//     if(this.state.dbank!=='undefined'){\r\n//       try{\r\n//         await this.state.token.methods.approve(this.state.dBankAddress,amount).send({from: this.state.account})\r\n//         await this.state.dbank.methods.payOffToken(address).send({ from:this.state.account});\r\n//         } catch (e) {\r\n//         // báo lỗi nếu việc lấy giá trị bị lỗi\r\n//         console.log('Error, deposit: ', e)\r\n//       }\r\n//     }\r\n//   }\r\n//   constructor(props) {\r\n//     super(props)\r\n//     this.state = {\r\n//       web3: 'undefined',\r\n//       account: '',\r\n//       token: null,\r\n//       dbank: null,\r\n//       balance: 0,\r\n//       dBankAddress: null,\r\n//       bankBanlace: 0,\r\n//       TokenBalance: 0,\r\n//       stake: 0,\r\n//       connect: false\r\n//     }\r\n//   }\r\n\r\n//   // dùng để tạo giao diện website \r\n//   render() {\r\n//     return (\r\n//       <div className='text-monospace'>\r\n//         {this.state.connect === false && <div onLoad={this.loadBlockchainData(this.props.dispatch)}></div> }\r\n//         { this.state.connect === true && <div>\r\n//         <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n//           <a\r\n//             className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n//             href=\"#\"\r\n//             target=\"_blank\"\r\n//             rel=\"noopener noreferrer\"\r\n//           >\r\n//         <img src={dbank} className=\"App-logo\" alt=\"logo\" height=\"32\"/>\r\n//           <b>d₿ank</b>\r\n            \r\n//         </a>\r\n//         </nav>\r\n//         <div className=\"container-fluid mt-5 text-center\">\r\n//         <br></br>\r\n//           <h1>Welcome to d₿ank</h1>\r\n//           <h2>{this.state.account}</h2>\r\n//           <h4>Ether: {this.state.bankBanlace / 10 ** 18}  <br/>  Token: {this.state.TokenBalance} <br/>  Stake: {this.state.stake} </h4>\r\n          \r\n//             <br></br>\r\n//           <div className=\"row\">\r\n//             <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n//               <div className=\"content mr-auto ml-auto\">\r\n//               <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\r\n//                 <Tab eventKey=\"send\" title = \"Send\">\r\n//                   <div>\r\n//                     <form>\r\n//                     {(amount != 10) && <div>\r\n//                       <br></br>\r\n//                       <button type='button'  onClick={this.sendAddress.bind(this)}className='btn btn-primary'>Send Address</button><br></br>\r\n//                       <br></br>\r\n//                       <button type='submit'  onClick={this.handleRequest.bind(this)}className='btn btn-primary'>Refresh</button>\r\n//                     </div>\r\n//                     }\r\n//                     {(amount == 10) && \r\n//                          <div>\r\n//                   <br></br>\r\n//                       <p>Do you want to deposit?</p>\r\n//                     <form onSubmit={(e) => {\r\n//                       e.preventDefault()\r\n//                       amount = amount * 10**18;\r\n//                       this.coc(amount);\r\n//                     }}>\r\n//                       {/* tạo form cho người dùng nhạp số lượng */}\r\n//                       <div className='form-group mr-sm-2'>\r\n//                       <br></br>\r\n//                         <input\r\n//                           type='number'\r\n//                           className=\"form-control form-control-md\"\r\n//                           placeholder= {amount}\r\n//                           disabled />\r\n//                       </div>\r\n//                       <button type=\"submit\" className='btn btn-primary'>DEPOSIT</button>{\" \"}\r\n//                       <button type=\"submit\" className='btn btn-primary' onClick={(e) => {\r\n//                       e.preventDefault()\r\n//                       amount = amount;\r\n//                       this.CocWithDeposit(amount);}} >Deposit with deposit</button><br/>\r\n//                       <button type=\"submit\" className='mt-2 btn btn-primary' onClick={(e) => {\r\n//                       e.preventDefault()\r\n//                       amount = amount;\r\n//                       this.CocWithToken(amount);}} >Deposit with Token</button>\r\n//                     </form>\r\n\r\n//                   </div>}\r\n//                     </form>\r\n//                     </div>\r\n//                 </Tab>\r\n//                 <Tab eventKey=\"lend\" title=\"lend\">\r\n//                   <div>\r\n//                   <br></br>\r\n//                     How much do you want to deposit?\r\n//                     <br></br>\r\n//                     (min. amount is 0.01 ETH)\r\n//                     <br></br>\r\n//                     (1 deposit is possible at the time)\r\n//                     <br></br>\r\n//                     <form >\r\n//                       {/* tạo form cho người dùng nhạp số lượng */}\r\n//                       <div className='form-group mr-sm-2'>\r\n//                       <br></br>\r\n//                         <input\r\n//                           id='address'\r\n//                           type='text'\r\n//                           ref={(input) => { this.address = input }}\r\n//                           className=\"form-control form-control-md\"\r\n//                           placeholder='adress...'\r\n//                           required />\r\n//                           <br></br>\r\n//                           <input\r\n//                           id='amountSend'\r\n//                           type='number'\r\n//                           ref={(input) => { this.amountSend = input }}\r\n//                           className=\"form-control form-control-md\"\r\n//                           placeholder='amount to lend...'\r\n//                           required />\r\n//                           <br></br>\r\n//                           <input\r\n//                           id='interest'\r\n//                           type='number'\r\n//                           ref={(input) => { this.interest = input }}\r\n//                           className=\"form-control form-control-md\"\r\n//                           placeholder='interest to lend...'\r\n//                           required />\r\n//                       </div>\r\n//                       <button type='button' className='m-3 mt-0 btn btn-primary' onClick={(e) => {\r\n//                       e.preventDefault()\r\n//                       let amountsend = this.amountSend.value\r\n//                       let interest = this.interest.value\r\n//                       let address = this.address.value\r\n//                       this.lendToken(address,amountsend,interest);\r\n//                     }}>lendToken</button>\r\n\r\n//                       <button type='button'  className='btn btn-primary m-3 mt-0' onClick={(e) => {\r\n//                       e.preventDefault()\r\n//                       let amountsend = this.amountSend.value\r\n//                       let interest = this.interest.value\r\n//                       let address = this.address.value\r\n//                       this.lendDerectly(address,amountsend,interest);\r\n//                     }}>lendDerectly</button>\r\n\r\n//                       <button type='button' className='btn btn-primary m-3 mt-0'\r\n//                       onClick={(e) => {\r\n//                       e.preventDefault()\r\n//                       let amountsend = this.amountSend.value\r\n//                       let interest = this.interest.value\r\n//                       let address = this.address.value\r\n//                       this.lend(address,amountsend,interest);\r\n//                     }}>lend</button>\r\n//                     </form>\r\n\r\n//                   </div>\r\n//                   </Tab>\r\n//                   <Tab eventKey=\"deposit\" title=\"Deposit\">\r\n//                   <div>\r\n//                   <br></br>\r\n//                     How much do you want to deposit?\r\n//                     <br></br>\r\n//                     (min. amount is 0.01 ETH)\r\n//                     <br></br>\r\n//                     (1 deposit is possible at the time)\r\n//                     <br></br>\r\n//                     {/* khi người dùng nhập vào số lượng và nhấn nút submit \\ */}\r\n//                     <form onSubmit={(e) => {\r\n//                       e.preventDefault()\r\n//                       // lấy số lượng ether mà người dùng muốn gửi\r\n//                       let amount = this.depositAmount.value\r\n//                       // đổi ra giá trị wei \r\n//                       amount = amount * 10**18 //convert to wei\r\n//                       // gọi hàm deposit với số lượng đó\r\n//                       this.deposit(amount);\r\n//                     }}>\r\n//                       {/* tạo form cho người dùng nhạp số lượng */}\r\n//                       <div className='form-group mr-sm-2'>\r\n//                       <br></br>\r\n//                         <input\r\n//                           id='depositAmount'\r\n//                           step=\"0.01\"\r\n//                           type='number'\r\n//                           ref={(input) => { this.depositAmount = input }}\r\n//                           className=\"form-control form-control-md\"\r\n//                           placeholder='amount...'\r\n//                           required />\r\n//                       </div>\r\n//                       <button type='submit' className='btn btn-primary'>DEPOSIT</button>\r\n//                     </form>\r\n\r\n//                   </div>\r\n//                   </Tab>\r\n//                   <Tab eventKey=\"withdraw\" title=\"Withdraw\">\r\n//                   <br></br>\r\n//                     Do you want to withdraw + take interest?\r\n//                     <br></br>\r\n//                     <br></br>\r\n//                   <div>\r\n//                     {/* tương tự như trên khi người dùng nhấn nút withdraw sẽ thực hiện hàm withdraw */}\r\n//                     <button type='submit' className='btn btn-primary' onClick={(e) => this.withdraw(e)}>WITHDRAW</button>\r\n//                   </div>\r\n//                 </Tab>\r\n//                 <Tab eventKey=\"Payoff\" title=\"Pay off\">\r\n//                   {lender != [] && lender.map(\r\n//                     lendercon  =>\r\n//                     <div>\r\n//                     <form >\r\n//                       {/* tạo form cho người dùng nhạp số lượng */}\r\n//                       <div className='form-group mr-sm-2'>\r\n//                       <br></br>\r\n//                         <input\r\n//                           type='text'\r\n//                           className=\"form-control form-control-md\"\r\n//                           placeholder= {lendercon.account} \r\n//                           disabled/>\r\n//                           <br></br>\r\n//                         <input\r\n//                           type='number'\r\n//                           className=\"form-control form-control-md\"\r\n//                           placeholder= {lendercon.value}\r\n//                           disabled\r\n//                           />\r\n//                           <br></br>\r\n//                         <input\r\n//                           type='text'\r\n//                           className=\"form-control form-control-md\"\r\n//                           placeholder= {lendercon.method}\r\n//                           disabled/>\r\n//                           <br></br>\r\n//                         <input\r\n//                           type='text'\r\n//                           className=\"form-control form-control-md\"\r\n//                           placeholder= {lendercon.payOffAmount} \r\n//                           disabled/>\r\n//                       </div>\r\n//                       <button type='button' className='m-3 mt-0 btn btn-primary' onClick={(e) => {\r\n//                       e.preventDefault()\r\n//                       this.payOffToken(lendercon.account, lendercon.payOffAmount);\r\n//                     }}>Pay off by Token</button>\r\n//                       <button type='button' className='btn btn-primary m-3 mt-0'\r\n//                       onClick={(e) => {\r\n//                       e.preventDefault()\r\n//                       this.payOffEther(lendercon.account, lendercon.payOffAmount);\r\n//                     }}>Pay off by Ether</button>\r\n//                     </form>\r\n\r\n//                   </div>)}\r\n//                   </Tab>\r\n//                 </Tabs>\r\n//               </div>\r\n//             </main>\r\n//           </div>\r\n//         </div>\r\n//         </div>}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }"]},"metadata":{},"sourceType":"module"}