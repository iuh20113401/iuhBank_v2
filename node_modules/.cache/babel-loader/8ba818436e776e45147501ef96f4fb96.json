{"ast":null,"code":"/*!\n * raw-body\n * Copyright(c) 2013-2014 Jonathan Ong\n * Copyright(c) 2014-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar asyncHooks = tryRequireAsyncHooks();\n\nvar bytes = require('bytes');\n\nvar createError = require('http-errors');\n\nvar iconv = require('iconv-lite');\n\nvar unpipe = require('unpipe');\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = getRawBody;\n/**\n * Module variables.\n * @private\n */\n\nvar ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /;\n/**\n * Get the decoder for a given encoding.\n *\n * @param {string} encoding\n * @private\n */\n\nfunction getDecoder(encoding) {\n  if (!encoding) return null;\n\n  try {\n    return iconv.getDecoder(encoding);\n  } catch (e) {\n    // error getting decoder\n    if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message)) throw e; // the encoding was not found\n\n    throw createError(415, 'specified encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    });\n  }\n}\n/**\n * Get the raw body of a stream (typically HTTP).\n *\n * @param {object} stream\n * @param {object|string|function} [options]\n * @param {function} [callback]\n * @public\n */\n\n\nfunction getRawBody(stream, options, callback) {\n  var done = callback;\n  var opts = options || {}; // light validation\n\n  if (stream === undefined) {\n    throw new TypeError('argument stream is required');\n  } else if (typeof stream !== 'object' || stream === null || typeof stream.on !== 'function') {\n    throw new TypeError('argument stream must be a stream');\n  }\n\n  if (options === true || typeof options === 'string') {\n    // short cut for encoding\n    opts = {\n      encoding: options\n    };\n  }\n\n  if (typeof options === 'function') {\n    done = options;\n    opts = {};\n  } // validate callback is a function, if provided\n\n\n  if (done !== undefined && typeof done !== 'function') {\n    throw new TypeError('argument callback must be a function');\n  } // require the callback without promises\n\n\n  if (!done && !global.Promise) {\n    throw new TypeError('argument callback is required');\n  } // get encoding\n\n\n  var encoding = opts.encoding !== true ? opts.encoding : 'utf-8'; // convert the limit to an integer\n\n  var limit = bytes.parse(opts.limit); // convert the expected length to an integer\n\n  var length = opts.length != null && !isNaN(opts.length) ? parseInt(opts.length, 10) : null;\n\n  if (done) {\n    // classic callback style\n    return readStream(stream, encoding, length, limit, wrap(done));\n  }\n\n  return new Promise(function executor(resolve, reject) {\n    readStream(stream, encoding, length, limit, function onRead(err, buf) {\n      if (err) return reject(err);\n      resolve(buf);\n    });\n  });\n}\n/**\n * Halt a stream.\n *\n * @param {Object} stream\n * @private\n */\n\n\nfunction halt(stream) {\n  // unpipe everything from the stream\n  unpipe(stream); // pause stream\n\n  if (typeof stream.pause === 'function') {\n    stream.pause();\n  }\n}\n/**\n * Read the data from the stream.\n *\n * @param {object} stream\n * @param {string} encoding\n * @param {number} length\n * @param {number} limit\n * @param {function} callback\n * @public\n */\n\n\nfunction readStream(stream, encoding, length, limit, callback) {\n  var complete = false;\n  var sync = true; // check the length and limit options.\n  // note: we intentionally leave the stream paused,\n  // so users should handle the stream themselves.\n\n  if (limit !== null && length !== null && length > limit) {\n    return done(createError(413, 'request entity too large', {\n      expected: length,\n      length: length,\n      limit: limit,\n      type: 'entity.too.large'\n    }));\n  } // streams1: assert request encoding is buffer.\n  // streams2+: assert the stream encoding is buffer.\n  //   stream._decoder: streams1\n  //   state.encoding: streams2\n  //   state.decoder: streams2, specifically < 0.10.6\n\n\n  var state = stream._readableState;\n\n  if (stream._decoder || state && (state.encoding || state.decoder)) {\n    // developer error\n    return done(createError(500, 'stream encoding should not be set', {\n      type: 'stream.encoding.set'\n    }));\n  }\n\n  if (typeof stream.readable !== 'undefined' && !stream.readable) {\n    return done(createError(500, 'stream is not readable', {\n      type: 'stream.not.readable'\n    }));\n  }\n\n  var received = 0;\n  var decoder;\n\n  try {\n    decoder = getDecoder(encoding);\n  } catch (err) {\n    return done(err);\n  }\n\n  var buffer = decoder ? '' : []; // attach listeners\n\n  stream.on('aborted', onAborted);\n  stream.on('close', cleanup);\n  stream.on('data', onData);\n  stream.on('end', onEnd);\n  stream.on('error', onEnd); // mark sync section complete\n\n  sync = false;\n\n  function done() {\n    var args = new Array(arguments.length); // copy arguments\n\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    } // mark complete\n\n\n    complete = true;\n\n    if (sync) {\n      process.nextTick(invokeCallback);\n    } else {\n      invokeCallback();\n    }\n\n    function invokeCallback() {\n      cleanup();\n\n      if (args[0]) {\n        // halt the stream on error\n        halt(stream);\n      }\n\n      callback.apply(null, args);\n    }\n  }\n\n  function onAborted() {\n    if (complete) return;\n    done(createError(400, 'request aborted', {\n      code: 'ECONNABORTED',\n      expected: length,\n      length: length,\n      received: received,\n      type: 'request.aborted'\n    }));\n  }\n\n  function onData(chunk) {\n    if (complete) return;\n    received += chunk.length;\n\n    if (limit !== null && received > limit) {\n      done(createError(413, 'request entity too large', {\n        limit: limit,\n        received: received,\n        type: 'entity.too.large'\n      }));\n    } else if (decoder) {\n      buffer += decoder.write(chunk);\n    } else {\n      buffer.push(chunk);\n    }\n  }\n\n  function onEnd(err) {\n    if (complete) return;\n    if (err) return done(err);\n\n    if (length !== null && received !== length) {\n      done(createError(400, 'request size did not match content length', {\n        expected: length,\n        length: length,\n        received: received,\n        type: 'request.size.invalid'\n      }));\n    } else {\n      var string = decoder ? buffer + (decoder.end() || '') : Buffer.concat(buffer);\n      done(null, string);\n    }\n  }\n\n  function cleanup() {\n    buffer = null;\n    stream.removeListener('aborted', onAborted);\n    stream.removeListener('data', onData);\n    stream.removeListener('end', onEnd);\n    stream.removeListener('error', onEnd);\n    stream.removeListener('close', cleanup);\n  }\n}\n/**\n * Try to require async_hooks\n * @private\n */\n\n\nfunction tryRequireAsyncHooks() {\n  try {\n    return require('async_hooks');\n  } catch (e) {\n    return {};\n  }\n}\n/**\n * Wrap function with async resource, if possible.\n * AsyncResource.bind static method backported.\n * @private\n */\n\n\nfunction wrap(fn) {\n  var res; // create anonymous resource\n\n  if (asyncHooks.AsyncResource) {\n    res = new asyncHooks.AsyncResource(fn.name || 'bound-anonymous-fn');\n  } // incompatible node.js\n\n\n  if (!res || !res.runInAsyncScope) {\n    return fn;\n  } // return bound function\n\n\n  return res.runInAsyncScope.bind(res, fn, null);\n}","map":{"version":3,"sources":["E:/2023_2024/IUH_HK2_2022_2023/LTPTDL2/dbank-master/client/node_modules/raw-body/index.js"],"names":["asyncHooks","tryRequireAsyncHooks","bytes","require","createError","iconv","unpipe","module","exports","getRawBody","ICONV_ENCODING_MESSAGE_REGEXP","getDecoder","encoding","e","test","message","type","stream","options","callback","done","opts","undefined","TypeError","on","global","Promise","limit","parse","length","isNaN","parseInt","readStream","wrap","executor","resolve","reject","onRead","err","buf","halt","pause","complete","sync","expected","state","_readableState","_decoder","decoder","readable","received","buffer","onAborted","cleanup","onData","onEnd","args","Array","arguments","i","process","nextTick","invokeCallback","apply","code","chunk","write","push","string","end","Buffer","concat","removeListener","fn","res","AsyncResource","name","runInAsyncScope","bind"],"mappings":"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","sourcesContent":["/*!\n * raw-body\n * Copyright(c) 2013-2014 Jonathan Ong\n * Copyright(c) 2014-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar asyncHooks = tryRequireAsyncHooks()\nvar bytes = require('bytes')\nvar createError = require('http-errors')\nvar iconv = require('iconv-lite')\nvar unpipe = require('unpipe')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = getRawBody\n\n/**\n * Module variables.\n * @private\n */\n\nvar ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /\n\n/**\n * Get the decoder for a given encoding.\n *\n * @param {string} encoding\n * @private\n */\n\nfunction getDecoder (encoding) {\n  if (!encoding) return null\n\n  try {\n    return iconv.getDecoder(encoding)\n  } catch (e) {\n    // error getting decoder\n    if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message)) throw e\n\n    // the encoding was not found\n    throw createError(415, 'specified encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    })\n  }\n}\n\n/**\n * Get the raw body of a stream (typically HTTP).\n *\n * @param {object} stream\n * @param {object|string|function} [options]\n * @param {function} [callback]\n * @public\n */\n\nfunction getRawBody (stream, options, callback) {\n  var done = callback\n  var opts = options || {}\n\n  // light validation\n  if (stream === undefined) {\n    throw new TypeError('argument stream is required')\n  } else if (typeof stream !== 'object' || stream === null || typeof stream.on !== 'function') {\n    throw new TypeError('argument stream must be a stream')\n  }\n\n  if (options === true || typeof options === 'string') {\n    // short cut for encoding\n    opts = {\n      encoding: options\n    }\n  }\n\n  if (typeof options === 'function') {\n    done = options\n    opts = {}\n  }\n\n  // validate callback is a function, if provided\n  if (done !== undefined && typeof done !== 'function') {\n    throw new TypeError('argument callback must be a function')\n  }\n\n  // require the callback without promises\n  if (!done && !global.Promise) {\n    throw new TypeError('argument callback is required')\n  }\n\n  // get encoding\n  var encoding = opts.encoding !== true\n    ? opts.encoding\n    : 'utf-8'\n\n  // convert the limit to an integer\n  var limit = bytes.parse(opts.limit)\n\n  // convert the expected length to an integer\n  var length = opts.length != null && !isNaN(opts.length)\n    ? parseInt(opts.length, 10)\n    : null\n\n  if (done) {\n    // classic callback style\n    return readStream(stream, encoding, length, limit, wrap(done))\n  }\n\n  return new Promise(function executor (resolve, reject) {\n    readStream(stream, encoding, length, limit, function onRead (err, buf) {\n      if (err) return reject(err)\n      resolve(buf)\n    })\n  })\n}\n\n/**\n * Halt a stream.\n *\n * @param {Object} stream\n * @private\n */\n\nfunction halt (stream) {\n  // unpipe everything from the stream\n  unpipe(stream)\n\n  // pause stream\n  if (typeof stream.pause === 'function') {\n    stream.pause()\n  }\n}\n\n/**\n * Read the data from the stream.\n *\n * @param {object} stream\n * @param {string} encoding\n * @param {number} length\n * @param {number} limit\n * @param {function} callback\n * @public\n */\n\nfunction readStream (stream, encoding, length, limit, callback) {\n  var complete = false\n  var sync = true\n\n  // check the length and limit options.\n  // note: we intentionally leave the stream paused,\n  // so users should handle the stream themselves.\n  if (limit !== null && length !== null && length > limit) {\n    return done(createError(413, 'request entity too large', {\n      expected: length,\n      length: length,\n      limit: limit,\n      type: 'entity.too.large'\n    }))\n  }\n\n  // streams1: assert request encoding is buffer.\n  // streams2+: assert the stream encoding is buffer.\n  //   stream._decoder: streams1\n  //   state.encoding: streams2\n  //   state.decoder: streams2, specifically < 0.10.6\n  var state = stream._readableState\n  if (stream._decoder || (state && (state.encoding || state.decoder))) {\n    // developer error\n    return done(createError(500, 'stream encoding should not be set', {\n      type: 'stream.encoding.set'\n    }))\n  }\n\n  if (typeof stream.readable !== 'undefined' && !stream.readable) {\n    return done(createError(500, 'stream is not readable', {\n      type: 'stream.not.readable'\n    }))\n  }\n\n  var received = 0\n  var decoder\n\n  try {\n    decoder = getDecoder(encoding)\n  } catch (err) {\n    return done(err)\n  }\n\n  var buffer = decoder\n    ? ''\n    : []\n\n  // attach listeners\n  stream.on('aborted', onAborted)\n  stream.on('close', cleanup)\n  stream.on('data', onData)\n  stream.on('end', onEnd)\n  stream.on('error', onEnd)\n\n  // mark sync section complete\n  sync = false\n\n  function done () {\n    var args = new Array(arguments.length)\n\n    // copy arguments\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n\n    // mark complete\n    complete = true\n\n    if (sync) {\n      process.nextTick(invokeCallback)\n    } else {\n      invokeCallback()\n    }\n\n    function invokeCallback () {\n      cleanup()\n\n      if (args[0]) {\n        // halt the stream on error\n        halt(stream)\n      }\n\n      callback.apply(null, args)\n    }\n  }\n\n  function onAborted () {\n    if (complete) return\n\n    done(createError(400, 'request aborted', {\n      code: 'ECONNABORTED',\n      expected: length,\n      length: length,\n      received: received,\n      type: 'request.aborted'\n    }))\n  }\n\n  function onData (chunk) {\n    if (complete) return\n\n    received += chunk.length\n\n    if (limit !== null && received > limit) {\n      done(createError(413, 'request entity too large', {\n        limit: limit,\n        received: received,\n        type: 'entity.too.large'\n      }))\n    } else if (decoder) {\n      buffer += decoder.write(chunk)\n    } else {\n      buffer.push(chunk)\n    }\n  }\n\n  function onEnd (err) {\n    if (complete) return\n    if (err) return done(err)\n\n    if (length !== null && received !== length) {\n      done(createError(400, 'request size did not match content length', {\n        expected: length,\n        length: length,\n        received: received,\n        type: 'request.size.invalid'\n      }))\n    } else {\n      var string = decoder\n        ? buffer + (decoder.end() || '')\n        : Buffer.concat(buffer)\n      done(null, string)\n    }\n  }\n\n  function cleanup () {\n    buffer = null\n\n    stream.removeListener('aborted', onAborted)\n    stream.removeListener('data', onData)\n    stream.removeListener('end', onEnd)\n    stream.removeListener('error', onEnd)\n    stream.removeListener('close', cleanup)\n  }\n}\n\n/**\n * Try to require async_hooks\n * @private\n */\n\nfunction tryRequireAsyncHooks () {\n  try {\n    return require('async_hooks')\n  } catch (e) {\n    return {}\n  }\n}\n\n/**\n * Wrap function with async resource, if possible.\n * AsyncResource.bind static method backported.\n * @private\n */\n\nfunction wrap (fn) {\n  var res\n\n  // create anonymous resource\n  if (asyncHooks.AsyncResource) {\n    res = new asyncHooks.AsyncResource(fn.name || 'bound-anonymous-fn')\n  }\n\n  // incompatible node.js\n  if (!res || !res.runInAsyncScope) {\n    return fn\n  }\n\n  // return bound function\n  return res.runInAsyncScope.bind(res, fn, null)\n}\n"]},"metadata":{},"sourceType":"script"}